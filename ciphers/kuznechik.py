# based on https://github.com/mjosaarinen/kuznechik
from sage.crypto.sbox import SBox
from ciphers.cipher import Cipher
from sage.matrix.constructor import Matrix
from sage.rings.finite_rings.finite_field_constructor import GF
from sage.modules.free_module_element import vector
from sage.modules.free_module import VectorSpace
from sage.rings.integer_ring import ZZ


class Kuznechik(Cipher):
    def __init__(self):
        S = SBox([0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16,
                  0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
                  0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA,
                  0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
                  0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21,
                  0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
                  0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0,
                  0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
                  0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB,
                  0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
                  0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12,
                  0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
                  0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7,
                  0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
                  0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E,
                  0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
                  0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9,
                  0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
                  0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC,
                  0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
                  0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44,
                  0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
                  0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F,
                  0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
                  0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7,
                  0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
                  0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE,
                  0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
                  0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B,
                  0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
                  0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0,
                  0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6])
        kuz_lvec = [0x94, 0x20, 0x85, 0x10, 0xC2, 0xC0, 0x01, 0xFB,
                    0x01, 0xC0, 0xC2, 0x10, 0x85, 0x20, 0x94, 0x01]

        def kuz_mul_gf256(x, y):
            z = 0
            while y:
                if y & 1:
                    z ^= x
                x = ((x << 1) ^ (0x00 if not x & 0x80 else 0xC3)) & 0xff
                y >>= 1
            return z

        def build_L(state):
            x = [ZZ(list(state[8*i:8*(i+1)]), 2) for i in range(16)]
            # 16 rounds
            for j in range(16):
                # An LFSR with 16 elements from GF(2^8)
                y = x[15]  # since lvec[15] = 1
                for i in range(14, -1, -1):
                    x[i + 1] = x[i]
                    y ^= kuz_mul_gf256(x[i], kuz_lvec[i])
                x[0] = y
            state_ = vector(state.base_ring(), 128)
            for i in range(16):
                state_[8*i:8*(i+1)] = ZZ(x[i]).digits(2, padto=8)
            return state_
        L = Matrix(GF(2), 128, 128)
        for i, e in enumerate(VectorSpace(GF(2), 128).basis()):
            L[:, i] = build_L(e)

        super().__init__(S, L, 16, "Kuznechik")
